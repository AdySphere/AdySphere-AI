# -*- coding: utf-8 -*-
"""AI - Commodity Trading - Al, Cu Ver 0.4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RBRsUHWDPE7kqGv1-QCnzW-4MzuIQniU
"""

#This code is using Together.ai

# -----------------------------
# üì¶ INSTALL DEPENDENCIES
# -----------------------------
!pip install prophet matplotlib pandas requests --quiet

# -----------------------------
# üìÑ IMPORT LIBRARIES
# -----------------------------
import pandas as pd
from prophet import Prophet
import matplotlib.pyplot as plt
import datetime
import requests
import json

# -----------------------------
# üìÅ UPLOAD CSV FILE
# -----------------------------
from google.colab import files
uploaded = files.upload()

# Replace with your uploaded file name
csv_file = list(uploaded.keys())[0]

# -----------------------------
# üìä LOAD AND PREP DATA
# -----------------------------
df = pd.read_csv(csv_file)

# Ensure date and price columns exist
df = df[["Date", "Price"]].rename(columns={"Date": "ds", "Price": "y"})
df["ds"] = pd.to_datetime(df["ds"])

# -----------------------------
# üîÆ FORECAST WITH PROPHET
# -----------------------------
model = Prophet()
model.fit(df)

future = model.make_future_dataframe(periods=7)
forecast = model.predict(future)

# -----------------------------
# üìà PLOT FORECAST & SAVE
# -----------------------------
fig = model.plot(forecast)
plt.title("Aluminum Price Forecast (Next 7 Days)")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.grid(True)
plot_path = "/content/forecast_plot.png"
plt.savefig(plot_path)
plt.show()

# -----------------------------
# ü§ñ AI-POWERED INSIGHT (Together.ai)
# -----------------------------

# Prepare forecast summary
summary_df = forecast[["ds", "yhat"]].tail(7)
summary_text = summary_df.to_string(index=False)

# Define your prompt
prompt = f"""
You are a financial analyst and market expert.

Given this 7-day price forecast for Aluminum:

{summary_text}

Based on the forecast and the chart image (path: {plot_path}), provide:
1. Market trend (rising, falling, or neutral)
2. Recommended trading strategy (long, short, hold)
3. Investor approach for the next 7 days
4. Risks or opportunities to watch
5. A final actionable, insightful summary

Respond like a human expert giving investment advice.
"""

# -----------------------------
# üîë TOGETHER.AI API CALL
# -----------------------------
api_key = "895b590f32d6475e94c42ecd8c42ab90b0b83c507bea5ef59b9748a5787f38c5"
together_url = "https://api.together.xyz/v1/chat/completions"

headers = {
    "Authorization": f"Bearer {api_key}",
    "Content-Type": "application/json"
}

payload = {
    "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",  # You can change to LLaMA-3 if needed
    "messages": [{"role": "user", "content": prompt}],
    "temperature": 0.7,
    "max_tokens": 500
}

response = requests.post(together_url, headers=headers, data=json.dumps(payload))

# -----------------------------
# üß† DISPLAY AI INSIGHT
# -----------------------------
if response.status_code == 200:
    insight = response.json()['choices'][0]['message']['content']
    print("\nüß† AI Market Insight:\n")
    print(insight)
else:
    print(f"Error from Together.ai: {response.status_code} - {response.text}")

#COPPER

# -----------------------------
# üì¶ INSTALL DEPENDENCIES
# -----------------------------
!pip install prophet matplotlib pandas requests --quiet

# -----------------------------
# üìÑ IMPORT LIBRARIES
# -----------------------------
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from google.colab import files
import requests
import json

# -----------------------------
# üìÅ UPLOAD CSV FILE
# -----------------------------
uploaded = files.upload()  # Upload your 'copper_sample.csv'

# -----------------------------
# üìä LOAD AND PREP DATA
# -----------------------------
df = pd.read_csv("Copper - Sample data April 2025 - 30 days.csv")  # Replace with the uploaded file name if different
df = df[["Date", "Price"]].rename(columns={"Date": "ds", "Price": "y"})
df["ds"] = pd.to_datetime(df["ds"])

# -----------------------------
# üîÆ FORECAST USING PROPHET
# -----------------------------
model = Prophet()
model.fit(df)
future = model.make_future_dataframe(periods=7)
forecast = model.predict(future)

# -----------------------------
# üìà PLOT FORECAST
# -----------------------------
fig = model.plot(forecast)
plt.title("Copper Price Forecast (Next 7 Days)")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.grid(True)
plot_path = "/content/forecast_plot_copper.png"
plt.savefig(plot_path)
plt.show()

# -----------------------------
# ü§ñ TOGETHER.AI ANALYSIS
# -----------------------------
TOGETHER_API_KEY = "895b590f32d6475e94c42ecd8c42ab90b0b83c507bea5ef59b9748a5787f38c5"
TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"

def get_ai_analysis_copper(forecast_df):
    summary_df = forecast_df[["ds", "yhat"]].tail(7)
    prompt = f"""
You are a financial market expert analyzing the price forecast for **Copper** over the next 7 days.
Below is the forecasted price movement:

{summary_df.to_string(index=False)}

Based on this forecast, please provide:
1. **Market Trend**: Rising, falling, or neutral?
2. **Trading Strategy**: Recommend long, short, or neutral position.
3. **Investor Strategy**: What should investors do?
4. **Risks and Opportunities**: What should traders watch out for?
5. **Actionable Summary**: Clear financial insight for investors.

Use the forecasted values and chart insight to explain.
[Plot Image Path: {plot_path}]
"""

    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 600
    }

    response = requests.post(TOGETHER_API_URL, headers=headers, json=data)

    if response.status_code == 200:
        result = response.json()
        return result['choices'][0]['message']['content']
    else:
        return f"‚ö†Ô∏è Error {response.status_code}: {response.text}"

# -----------------------------
# üì¢ RUN AI ANALYSIS
# -----------------------------
ai_response = get_ai_analysis_copper(forecast)
print("\nüß† AI Insight for Copper:")
print(ai_response)